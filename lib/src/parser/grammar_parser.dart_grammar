{
import "package:parser_peg/src/node.dart";
import "package:parser_peg/src/generator.dart";
import "package:parser_peg/src/statement.dart";

final _regexps = (
  from: RegExp(r"\bfrom\b"),
  to: RegExp(r"\bto\b"),
  span: RegExp(r"\bspan\b"),
);
}

/// A grammar file contains an optional preamble and statements.
ParserGenerator document = ^ preamble? _..statement+ _? $
  |> ParserGenerator.fromParsed(preamble: $1, statements: $2);

/// The preamble is simple.
String preamble = `{` _ code:code.curly _ `}` @2;

/// A statement can either be a namespace, a fragment or a rule.
///  A hybrid namespace is a namespace that can be used as a rule.
///   The operation for a hybrid namespace is only the choice operation.
///  A namespace is a collection of statements.
///  A fragment is a declaration that is faster, but doesn't support left recursion / memoization.
///  A rule is a declaration, that supports left recursion & memoization.
Statement statement =
  | outer_decorator:kw.decorator?
      :type? name:identifier `=` mac.choice
      inner_decorator:kw.decorator? `{` statements:_..statement+ `}`
      `;`?
    |> HybridNamespaceStatement(
      type, name, statements,
      outerTag: outer_decorator, innerTag: inner_decorator
    )
  | outer_decorator:kw.decorator?
      :type? `(` `)` `=` mac.choice
      inner_decorator:kw.decorator? `{` statements:_..statement+ `}`
      `;`?
    |> HybridNamespaceStatement(
      type, null, statements,
      outerTag: outer_decorator, innerTag: inner_decorator
    )

/// A namespace is a block of statements which can apply a tag and/or be encapsulated
///   under a name.
  | :kw.decorator? name:identifier? `{` statements:_..statement+ `}`
    |> NamespaceStatement(name, statements, tag: decorator)

/// A type declaration is a separate statement from the declaration
///   that can be used as a basis for types or tags.
  | :kw.decorator? :type? names:`,`..name+ `;`
    |> DeclarationTypeStatement(type, names, tag: decorator)
  | :kw.decorator? kw.var? :name `:` :type `;`
    |> DeclarationTypeStatement(type, [name], tag: decorator)

/// A declaration is a statement that can be referenced by other declarations.
///   Formally, it is a non-terminal.

  | :kw.decorator? kw.var? :name :body
    |> DeclarationStatement(null, name, body, tag: decorator)
  | :kw.decorator? :type :name :body
    |> DeclarationStatement(type, name, body, tag: decorator)
  | :kw.decorator? kw.var? :name `:` :type :body
    |> DeclarationStatement(type, name, body, tag: decorator);

/// A choice parser is a parser that tries to match one of the options.
/// Despite the syntax, the parser is ordered choice.
Node choice = (`|` `|`?)? options:(`|` `|`?)..acted+
  |> options.length == 1 ? options.single : ChoiceNode(options);

/// A parser with a bound action.
Node acted =
  | :sequence `|>` _ code:code.nl _ {
      InlineActionNode(
        sequence,
        code.trimRight(),
        areIndicesProvided: code.contains(_regexps.from) && code.contains(_regexps.to),
        isSpanUsed: code.contains(_regexps.span),
      )
    }
  | :sequence `{` _ code:code.curly _ `}` {
      InlineActionNode(
        sequence,
        code.trimRight(),
        areIndicesProvided: code.contains(_regexps.from) && code.contains(_regexps.to),
        isSpanUsed: code.contains(_regexps.span),
      )
    }
  | :sequence `(` `)` `{` _ code:code.curly _ `}` {
      ActionNode(
        sequence,
        code.trimRight(),
        areIndicesProvided: code.contains(_regexps.from) && code.contains(_regexps.to),
        isSpanUsed: code.contains(_regexps.span),
      )
    }
  | sequence
;

/// A parser that parses a sequence of parsers.
///   By default, a sequence parser returns a [Record] of the results of the parsers.
/// By specifying which item to keep, the specific item can be returned.
Node sequence =
  | body:_..dropped+ chosen:(`@` number @1)? {
      body.length == 1 ? body.single : SequenceNode(body, chosenIndex: chosen)
    }
;

/// A parser that is prefixed or suffixed by another parser.
Node dropped =
  | captured:dropped `<~` dropped:special { SequenceNode([captured, dropped], chosenIndex: 0) }
  | dropped:special `~>` captured:dropped { SequenceNode([dropped, captured], chosenIndex: 1) }
  | labeled
;

/// A parser that adds the label to the declaration of the value.
Node labeled =
  | :identifier ":" _ :special (){
      return NamedNode(identifier, special);
    }
  | ":" id:namespacedIdentifier `?` (){
      var name = id.split(ParserGenerator.separator).last;

      return NamedNode(name, OptionalNode(ReferenceNode(id)));
    }
  | ":" id:namespacedIdentifier `*` (){
      var name = id.split(ParserGenerator.separator).last;

      return NamedNode(name, StarNode(ReferenceNode(id)));
    }
  | ":" id:namespacedIdentifier `+` (){
      var name = id.split(ParserGenerator.separator).last;

      return NamedNode(name, PlusNode(ReferenceNode(id)));
    }
  | ":" id:namespacedIdentifier (){
      var name = id.split(ParserGenerator.separator).last;

      return NamedNode(name, ReferenceNode(id));
    }
  | special
;

/// Pegen style separators.
///   Difference here, is that we can use `+` or `*` as quantifiers.
///   `*`, like a normal kleene-star, means zero or more.
///   `+`, like a normal kleene-plus, means one or more.
///   So technically, _.."a"* is equivalent to "a"*.
Node special =
  | sep:call `..` expr:call `+` `?` |> PlusSeparatedNode(sep, expr, isTrailingAllowed: true)
  | sep:call `..` expr:call `*` `?` |> StarSeparatedNode(sep, expr, isTrailingAllowed: true)
  | sep:call `..` expr:call `+`     |> PlusSeparatedNode(sep, expr, isTrailingAllowed: false)
  | sep:call `..` expr:call `*`     |> StarSeparatedNode(sep, expr, isTrailingAllowed: false)
  | postfix
;

/// A parser that is quantified.
///   Can be nested, but shouldn't be used in practice.
Node postfix =
  | postfix `?` @0 |> OptionalNode($)
  | postfix `*` @0 |> StarNode($)
  | postfix `+` @0 |> PlusNode($)
  | prefix
;

/// A parser that is prefixed.
///   Usually with disambiguators such as `and-predicate` and `not-predicate`.
Node prefix =
  | min:number `..` max:number? body:atom |> CountedNode(min, max, body)
  | :number body:atom                     |> CountedNode(number, number, body)
  | `~` prefix @1 |> ExceptNode($)
  | `&` prefix @1 |> AndPredicateNode($)
  | `!` prefix @1 |> NotPredicateNode($)
  | call
;

/// "Call"-like because they technically look like a call, but this is special syntax.
///   (Calls don't exist.)
Node call =
  /// Flattens a parser result.
  ///   a.flat!()
  | target:call `.` mac.flat `(`  `)` {
      InlineActionNode(target, "span", areIndicesProvided: true, isSpanUsed: true)
    }
  /// Expects a number of results.
  ///  a.range!(2, 4)
  | target:call `.` mac.range `(` min:number `,` max:number `)` {
      CountedNode(min, max, target)
    }

  ///  a.range!(2)
  | target:call `.` mac.range `(` :number `)` { CountedNode(number, number, target) }

  ///  a.range! 2
  | target:call `.` mac.range  _  :number  _ { CountedNode(number, number, target) }

  /// Separates a parser by a separator.
  ///
  ///  a.sep! b
  | sep:call `.` mac.sep `(` body:choice `)` `+` `?` {
      PlusSeparatedNode(sep, body, isTrailingAllowed: true)
    }
  | sep:call `.` mac.sep `(` body:choice `)` `*` `?` {
      StarSeparatedNode(sep, body, isTrailingAllowed: true)
    }
  | sep:call `.` mac.sep `(` body:choice `)` `+` {
      PlusSeparatedNode(sep, body, isTrailingAllowed: false)
    }
  | sep:call `.` mac.sep `(` body:choice `)` `*` {
      StarSeparatedNode(sep, body, isTrailingAllowed: false)
    }
  | sep:call `.` mac.sep `(` body:choice `)` {
      PlusSeparatedNode(sep, body, isTrailingAllowed: false)
    }
  | sep:call `.` mac.sep  _  body:atom  _ {
      PlusSeparatedNode(sep, body, isTrailingAllowed: false)
    }
  | atom
;

/// A parser that can be qualified as a group.
///   These are usually parsers that are delimited.
Node atom =
  /// Basic atomic parsers.
  | `(` ~> choice <~ `)`

  /// Special syntax for character classes.
  | `^`                        |> const StartOfInputNode()
  | `$`                        |> const EndOfInputNode()
  | `.`                        |> const AnyCharacterNode()
  | `Îµ`                        |> const EpsilonNode()

  /// Regular Expression Literals
  | regexEscape.backslash      |> const StringLiteralNode(r"\")

  /// Basics
  | regexEscape.digit          |> SimpleRegExpEscapeNode.digit
  | regexEscape.word           |> SimpleRegExpEscapeNode.word
  | regexEscape.whitespace     |> SimpleRegExpEscapeNode.whitespace

  /// Inverses
  | regexEscape.notDigit       |> SimpleRegExpEscapeNode.notDigit
  | regexEscape.notWord        |> SimpleRegExpEscapeNode.notWord
  | regexEscape.notWhitespace  |> SimpleRegExpEscapeNode.notWhitespace

  /// Spaces
  | regexEscape.tab            |> SimpleRegExpEscapeNode.tab
  | regexEscape.newline        |> SimpleRegExpEscapeNode.newline
  | regexEscape.carriageReturn |> SimpleRegExpEscapeNode.carriageReturn
  | regexEscape.formFeed       |> SimpleRegExpEscapeNode.formFeed
  | regexEscape.verticalTab    |> SimpleRegExpEscapeNode.verticalTab

  /// Basic literals.
  | literal.range
  | literal.regexp             |> RegExpNode($)
  | literal.string             |> StringLiteralNode($)
  | name                       |> ReferenceNode($)
;

code {
  String curly =
    | "`" ~"`"* "`" @1 { $.join() }
    | code:(
        | dart.literal.string
        | "{" balanced "}" @1 {"{" + $ + "}"}
        | "(" balanced ")" @1 {"(" + $ + ")"}
        | "[" balanced "]" @1 {"[" + $ + "]"}
        | ~("}")
      )* { code.join() };

  String nl =
    | "`" ~"`"* "`" @1 { $.join() }
    | (
        | dart.literal.string
        | "{" balanced "}" @1 {"{" + $ + "}"}
        | "(" balanced ")" @1 {"(" + $ + ")"}
        | "[" balanced "]" @1 {"[" + $ + "]"}
        | ~(\n | ";" | ")")
      )* { $.join() };

  String balanced = (
    | dart.literal.string
    | "{" balanced "}" @1 {"{" + $ + "}"}
    | "(" balanced ")" @1 {"(" + $ + ")"}
    | "[" balanced "]" @1 {"[" + $ + "]"}
    | ~("}" | ")" | "]")
  )* { $.join() };
}

@fragment literal {
  String regexp = "/" ((\\ . @1 { r"\" + $ } | ~"/")+ { $.join() }) "/" @1;
  String string = _ string.main _ @1;
  string {
    @inline String main =
      /// Raw string literals
      | 'r"""' ~'"""'* '"""' @1 { $.join() }
      | "r'''" ~"'''"* "'''" @1 { $.join() }
      | 'r"'   ~'"'*   '"'   @1 { $.join() }
      | "r'"   ~"'"*   "'"   @1 { $.join() }
      /// Escaped string literals
      | '"""' (\\ . | ~'"""')* '"""' @1 { $.join() }
      | "'''" (\\ . | ~"'''")* "'''" @1 { $.join() }
      | '"'   (\\ . | ~'"'  )* '"'   @1 { $.join() }
      | "'"   (\\ . | ~"'"  )* "'"   @1 { $.join() }
      ;
  }

  Node range =  _ range.main _ @1;
  range {
    @inline main =
      | _ "[" elements:_..element+ "]" _
        |> RangeNode(elements.expand((e) => e).toSet());

    Set<(int, int)> element =
      | escape
      | l:atom "-" r:atom |> {(l.codeUnitAt(0), r.codeUnitAt(0))}
      | atom              |> {($.codeUnitAt(0), $.codeUnitAt(0))}
      ;

    @inline escape =
      | " "                        { {(32, 32)} } // " "
      | regexEscape.digit          { {(48, 57)} } // 0-9
      | regexEscape.word           { {(64 + 1, 64 + 26), (96 + 1, 96 + 26)} } // a-z, A-Z
      | regexEscape.whitespace     { {(9, 13), (32, 32)} } // \t, \n, \r, \f, \v, space
      | regexEscape.newline        { {(10, 10)} }
      | regexEscape.carriageReturn { {(13, 13)} }
      | regexEscape.tab            { {(9, 9)} }
      | regexEscape.backslash      { {(92, 92)} }
      ;

    String atom = \\ . @1 | ~"]";
  }

  String raw = "`" ~"`"* "`" @1 { $.join() };
}

/// Rules related to [Dart] expressions.
dart {
  literal {
    /// Since string literals in [Dart] can be put adjacent, we need to parse while
    ///   there are still string literals.
    String string = _..string.body.flat!()+ { $.join(" ") };
    String identifier = global.identifier.flat!();

    string {
      @inline body =
        /// Raw string literals
        | 1"r" '"""' ~'"""'* '"""' |> ()
        | 1"r" "'''" ~"'''"* "'''" |> ()
        | 1"r" '"'   ~'"'*   '"'   |> ()
        | 1"r" "'"   ~"'"*   "'"   |> ()
        /// Escaped string literals
        | '"""' (\\ . @1 | &"$" interpolation | ~'"""')* '"""' |> ()
        | "'''" (\\ . @1 | &"$" interpolation | ~"'''")* "'''" |> ()
        | '"'   (\\ . @1 | &"$" interpolation | ~'"'  )* '"'   |> ()
        | "'"   (\\ . @1 | &"$" interpolation | ~"'"  )* "'"   |> ()
        ;

      @inline interpolation =
        | r"$" "{" balanced "}"
        | r"$" identifier
        ;

      String balanced = (
        | string
        | "{" balanced "}" @1 {"{" + $ + "}"}
        | ~"}"
      )* |> $.join();
    }
  }

  type {
    String main = _ type _ @1;
    String type =
      | :type _ "Function" _ :fn.parameters `?`? |> "$type Function$parameters${$5 ?? ""}"
      | nullable;

    String nullable =
      | :nonNullable `?` {"$nonNullable?"}
      | nonNullable;

    String nonNullable = generic | record | base;

    /// A record type.
    ///   The fields can be positional or named.
    ///   The fields are special by commas.
    // (int, int b, {int a,})
    // (int, int b,)
    // ({int a,})
    // ()
    String record =
      | `(` positional:fields.positional `,` named:parameters.named `)`
        |> "(" + positional + ", " + named + ")"
      | `(` positional:fields.positional `,`? `)`
        |> "(" + positional + ")"
      | `(` named:parameters.named `)`
        |> "(" + named + ")"
      | `(`  `)`
        |> "()";

    /// Dart function type.
    // (int a, int b, {int a})
    // (int a, int b, [int a])
    // (int a, int b)
    // ({int a, int b})
    // ([int a, int b])
    // ()
    fn {
      String parameters =
        | `(` positional:fields.positional `,` named:parameters.named `)`
            { "($positional, $named)" }
        | `(` positional:fields.positional `,` optional:parameters.optional `)`
            { "($positional, $optional)" }
        | `(` positional:fields.positional `,`? `)`
            { "($positional)" }
        | `(` named:parameters.named `)`
            { "($named)" }
        | `(` optional:parameters.optional `)`
            { "($optional)" }
        | `(` `)`
            { "()" };
    }

    @rule {
      String generic   = :base `<` :arguments `>` { "$base<$arguments>" };
      String arguments = `,`..type+               { $.join(", ") };
      String base      = `.`..identifier+         { $.join(".") };
    }

    parameters {
      String optional = `[` fields.positional `,`? `]` { "[" + $1 + "]" };
      String named    = `{` fields.named `,`? `}`      { "{" + $1 + "}" };
    }

    fields {
      String positional = `,`..field.positional+ { $.join(", ") };
      String named      = `,`..field.named+      { $.join(", ") };
    }

    field {
      String positional = type _ identifier? { "${$0} ${$2 ?? ""}".trimRight() };
      String named      = type _ identifier  { "${$0} ${$2}" };
    }
  }
}

@fragment /* Shared code between declarations */ {
  String type =
    | _ raw _ @1
    | dart.type.main;

  /// [namespaceReference] is a reference to a namespace.
  ///   It is a sequence of identifiers separated by "::" or ".".
  ///   It should not match a macro.
  String namespaceReference = (identifier ("::" | !".." ".") !mac @0)*
    |> $.join(ParserGenerator.separator);

  /// A [name] can be a single name, or multiple aliases.
  ///  The aliases are separated by `&&`, surrounded by parentheses.
  String name =
    | namespacedRaw
    | namespacedIdentifier;

  /// [namespacedRaw] refers to a name which may have accessed a namespace,
  ///   using a raw trailing name ``<example>``
  String namespacedRaw = namespaceReference literal.raw { $0.isEmpty ? $1 : "${$0}::${$1}" };
  String namespacedIdentifier = namespaceReference identifier { $0.isEmpty ? $1 : "${$0}::${$1}" };

  Node body = ((`:`? `=`)| `<-` | `->`) :choice `;` { choice };
}

/// Tokens used in the grammar.
///   Since they are not recursive, they are not defined as rules.
@fragment {
  String identifier = /[a-zA-Z_$][a-zA-Z0-9_$]*/ { span };
  String raw        = "`" 0..(~"`") "`" @1 { $.join() };
  int number        = \d+ { int.parse($.join()) };

  kw {
    Tag decorator
      = _ "@rule" _     { Tag.rule }
      | _ "@fragment" _ { Tag.fragment }
      | _ "@inline" _   { Tag.inline }
      ;

    String start     = _ "startOfInput" _ @1;
    String end       = _ "endOfInput" _   @1;
    String backslash = _ "backslash" _    @1;
    String epsilon   = _ "epsilon" _      @1;
    String any       = _ "any" _          @1;
    String var       = _ "var" _          @1;
  }

  /// Tokens used in "macro-like" rules.
  String mac = choice! @fragment {
    range  = _ "range!"  _ @1;
    flat   = _ "flat!"   _ @1;
    sep    = _ "sep!"    _ @1;
    choice = _ "choice!" _ @1;
  };

  String regexEscape = choice! @fragment {
    backslash       = _ (\\ r"\").flat!() _ @1;

    digit           = _ (\\ r"d").flat!() _ @1;
    word            = _ (\\ r"w").flat!() _ @1;
    whitespace      = _ (\\ r"s").flat!() _ @1;

    notDigit        = _ (\\ r"d").flat!() _ @1;
    notWord         = _ (\\ r"w").flat!() _ @1;
    notWhitespace   = _ (\\ r"s").flat!() _ @1;

    newline         = _ (\\ r"n").flat!() _ @1;
    carriageReturn  = _ (\\ r"r").flat!() _ @1;
    tab             = _ (\\ r"t").flat!() _ @1;
    formFeed        = _ (\\ r"f").flat!() _ @1;
    verticalTab     = _ (\\ r"v").flat!() _ @1;
    null            = _ (\\ r"0").flat!() _ @1;
    control         = _ (\\ r"c").flat!() _ @1;
    hex             = _ (\\ r"x").flat!() _ @1;
    unicode         = _ (\\ r"u").flat!() _ @1;
    unicodeExtended = _ (\\ r"U").flat!() _ @1;
    literal         = _ (\\ r".").flat!() _ @1;
  };

  /// Literal tokens
  String () = choice! @fragment {
    `..` = _ ".." _ @1;
    `::` = _ "::" _ @1;
    `%%` = _ "%%" _ @1;
    `=>` = _ "=>" _ @1;
    `<-` = _ "<-" _ @1;
    `->` = _ "->" _ @1;
    `~>` = _ "~>" _ @1;
    `<~` = _ "<~" _ @1;
    `|>` = _ "|>" _ @1;
    `&&` = _ "&&" _ @1;

    `%` = _ "%" _ @1;
    `@` = _ "@" _ @1;
    `<` = _ "<" _ @1;
    `>` = _ ">" _ @1;
    `]` = _ "]" _ @1;
    `[` = _ "[" _ @1;
    `}` = _ "}" _ @1;
    `{` = _ "{" _ @1;
    `)` = _ ")" _ @1;
    `(` = _ "(" _ @1;
    `;` = _ ";" _ @1;
    `=` = _ "=" _ @1;
    `?` = _ "?" _ @1;
    `!` = _ "!" _ @1;
    `~` = _ "~" _ @1;
    `&` = _ "&" _ @1;
    `*` = _ "*" _ @1;
    `+` = _ "+" _ @1;
    `,` = _ "," _ @1;
    `:` = _ ":" _ @1;
    `|` = _ "|" _ @1;
    `/` = _ "/" _ @1;

    `.` = _ "." _ @1;
    `Îµ` = _ "Îµ" _ @1;
    `^` = _ "^" _ @1;
    `$` = _ "$" _ @1;
  }

  /// Layout parser allows comments (like this) and space between parsers.
  /// Regular Expression monster below:
  ///   Split into three parts.
  ///   1. `(\s)` - Matches any whitespace character.
  ///   2. `(\/{2}.*((\r?\n)|($)))` - Matches a single line comment.
  ///   3. `(\/\*((?!\*\/).)*\*\/)` - Matches a multi-line comment.

  /// These entries are commented out as I think they are slower than regexp counterparts.

  // String _ = (whitespace | comment.singleLine | comment.multiLine)* |> "";
  // String whitespace = \s+                                           |> "";
  // String comment.singleLine = "//" (~(\r?\n|$))* &(\r?\n|$)         |> "";
  // String comment.multiLine = "/*" (~"*/")* "*/"                     |> "";

  // String _ = (whitespace | comment.singleLine | comment.multiLine)*  { "" };
  // String whitespace = /\s+/;
  // String comment.singleLine = /\/{2}((?!((\r?\n)|($))).)*(?=(\r?\n)|($))/;
  // String comment.multiLine = /(\/\*((?!\*\/).)*\*\/)/;

  String _ = /((\s+)|(\/{2}((?!((\r?\n)|($))).)*(?=(\r?\n)|($)))|((\/\*((?!\*\/).)*\*\/)))*/ |> "";
}
