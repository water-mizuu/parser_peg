
String main = _ type _ $ @1;
String type =
  | parameters:function_parameters `=>` :type { "$type Function$parameters" }
  /// Dart function type.
  | :type _ "Function" parameters:function_parameters `?`? { "$type Function$parameters${$4 ?? ""}" }
  | nullable;

String nullable = :nonNullable `?`? { $1 == null ? "$nonNullable" : "$nonNullable?" };
String nonNullable = generic | record | base;

/// A record type.
///   The fields can be positional or named.
///   The fields are special by commas.
String record =
  // (int, int b, {int a,})
  | `(` positional:fields.positional `,` named:parameters.named `)` { "(" + positional + ", " + named + ")"}
  // (int, int b,)
  | `(` positional:fields.positional `,`? `)` { "(" + positional + ")"}
  // ({int a,})
  | `(` named:parameters.named `)` { "(" + named + ")"}
  // ()
  | `(`  `)` { "()" }
  ;

String function_parameters =
  // (int a, int b, {int a})
  | `(` positional:fields.positional `,` named:parameters.named `)` { "($positional, $named)" }
  // (int a, int b, [int a])
  | `(` positional:fields.positional `,` optional:parameters.optional `)` { "($positional, $optional)" }
  // (int a, int b)
  | `(` positional:fields.positional `,`? `)` { "($positional)" }
  // ({int a, int b})
  | `(` named:parameters.named `)` { "($named)" }
  // ([int a, int b])
  | `(` optional:parameters.optional `)` { "($optional)" }
  // ()
  | `(` `)` { "()" }
  ;

@rule {
  String generic   = :base `<` :arguments `>` { "$base<$arguments>" };
  String arguments = `,`..type+ { $.join(", ") };
  String base      = `.`..identifier+ { $.join(".") };
}

parameters {
  String optional = `[` fields.positional `,`? `]` { "[" + $1 + "]" };
  String named    = `{` fields.named `,`? `}` { "{" + $1 + "}" };
}

fields {
  String positional = `,`..field.positional+ { $.join(", ") };
  String named      = `,`..field.named+ { $.join(", ") };
}

field {
  String positional = type _ identifier? { "${$0} ${$2 ?? ""}".trimRight() };
  String named      = type _ identifier { "${$0} ${$2}" };
}



String `..`  = _ ".." _ @1;
String `::`  = _ "::" _ @1;
String `%%`  = _ "%%" _ @1;
String `=>`  = _ "=>" _ @1;
String `<-`  = _ "<-" _ @1;
String `->`  = _ "->" _ @1;
String `~>`  = _ "~>" _ @1;
String `<~`  = _ "<~" _ @1;

String `%` = _ "%" _ @1;
String `@` = _ "@" _ @1;
String `<` = _ "<" _ @1;
String `>` = _ ">" _ @1;
String `]` = _ "]" _ @1;
String `[` = _ "[" _ @1;
String `}` = _ "}" _ @1;
String `{` = _ "{" _ @1;
String `)` = _ ")" _ @1;
String `(` = _ "(" _ @1;
String `;` = _ ";" _ @1;
String `=` = _ "=" _ @1;
String `?` = _ "?" _ @1;
String `!` = _ "!" _ @1;
String `~` = _ "~" _ @1;
String `&` = _ "&" _ @1;
String `*` = _ "*" _ @1;
String `+` = _ "+" _ @1;
String `,` = _ "," _ @1;
String `:` = _ ":" _ @1;
String `|` = _ "|" _ @1;
String `/` = _ "/" _ @1;

String `.` = _ "." _ @1;
String `ε` = _ "ε" _ @1;
String `^` = _ "^" _ @1;
String `$` = _ "$" _ @1;

String identifier = [a-zA-Z_$][a-zA-Z0-9_$]* { $0 + $1.join() };
String raw = "`" ~"`"* "`" @1 { $.join() };
int number = \d+ { int.parse($.join()) };

String _ = (whitespace | comment.singleLine | comment.multiLine)*  { "" };
String whitespace = /\s+/;
String comment.singleLine = /\/{2}(?:(?!(?:(?:\r?\n)|(?:$))).)*(?=(?:\r?\n)|(?:$))/;
String comment.multiLine = /(?:\/\*(?:(?!\*\/).)*\*\/)/;